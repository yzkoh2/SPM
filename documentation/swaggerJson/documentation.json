{
  "openapi": "3.0.0",
  "info": {
    "title": "User Service API",
    "description": "API for managing users, tasks, and projects including authentication and data management.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local Development Server"
    }
  ],
  "tags": [
    {
      "name": "User",
      "description": "Endpoints for user management and authentication."
    },
    {
      "name": "Task",
      "description": "Endpoints for tasks management"
    },
    {
      "name": "Project",
      "description": "Endpoints for project management"
    },
    {
      "name": "Notification",
      "description": "Email notification management endpoints"
    }
  ],
  "paths": {
    "/user/create": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new user",
        "description": "Registers a new user in the system with a username, email, and password.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "johndoe"
                  },
                  "name": {
                    "type": "string",
                    "example": "john"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "strongpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - A user with the given username or email already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User Login",
        "description": "Authenticates a user and returns a JWT token upon successful login.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "strongpassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "userID": {
                      "type": "integer",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "john"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing email or password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid login credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/user/{user_id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get a user by ID",
        "description": "Retrieves public information for a single user by their unique ID.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The user with the specified ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/user/verifyJWT": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Verify JWT and get current user data",
        "description": "Protected endpoint that requires a valid JWT. Decodes the token and returns the authenticated user's data.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid. User data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token is missing, invalid, or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - The user associated with the token was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Get all tasks",
        "description": "Get all tasks, optionally filtered by owner_id",
        "responses": {
          "200": {
            "description": "All tasks returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Task not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a new task",
        "description": "Create a new task by providing title and owner_id",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Finish project report"
                  },
                  "description": {
                    "type": "string",
                    "example": "Prepare the final report for submission"
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-10-01T23:59:59Z"
                  },
                  "status": {
                    "type": "string",
                    "example": "Unassigned"
                  },
                  "owner_id": {
                    "type": "integer",
                    "example": 1
                  }
                },
                "required": [
                  "title",
                  "owner_id"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Title is required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{task_id}/subtasks": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a new subtask for a task",
        "description": "Create a new subtask under the specified task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the parent task"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "Write introduction section"
                  },
                  "status": {
                    "type": "string",
                    "example": "Unassigned"
                  }
                },
                "required": [
                  "title"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subtask created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subtask"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Subtask title is required"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Task not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a new project",
        "description": "Create a new project. The user who creates the project becomes the owner.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "user_id"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Website Redesign Project"
                  },
                  "description": {
                    "type": "string",
                    "example": "Complete redesign of the company website with modern UI/UX"
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2025-12-31T23:59:59"
                  },
                  "user_id": {
                    "type": "integer",
                    "example": 1,
                    "description": "The user ID of the project creator/owner"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Project created successfully"
                    },
                    "project": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing required fields or invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{project_id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get a project by ID",
        "description": "Retrieve detailed information about a specific project",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the project",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "project": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update project details",
        "description": "Update project information. Only the project owner can update the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the project",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "user_id"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Updated Project Name"
                  },
                  "description": {
                    "type": "string",
                    "example": "Updated project description"
                  },
                  "deadline": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2026-06-30T18:00:00"
                  },
                  "user_id": {
                    "type": "integer",
                    "example": 1,
                    "description": "The user ID performing the update (must be the owner)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Project updated successfully"
                    },
                    "project": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only the project owner can update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a project",
        "description": "Delete a project. Only the project owner can delete the project.",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the project",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "user_id"
                ],
                "properties": {
                  "user_id": {
                    "type": "integer",
                    "example": 1,
                    "description": "The user ID performing the deletion (must be the owner)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Project deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Missing user_id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Only the project owner can delete",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/projects/user/{user_id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get all projects for a user",
        "description": "Retrieve all projects that a user is involved in (as owner or collaborator)",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the user",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "description": "Filter projects by user role (owner or collaborator)",
            "schema": {
              "type": "string",
              "enum": [
                "owner",
                "collaborator"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Projects retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user_id": {
                      "type": "integer",
                      "example": 1
                    },
                    "total_projects": {
                      "type": "integer",
                      "example": 3
                    },
                    "projects": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Project"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "user_role": {
                                "type": "string",
                                "example": "owner",
                                "description": "The user's role in this project (owner or collaborator role)"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/status-update": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Send status update notification (Internal)",
        "description": "Internal endpoint to trigger status update email notifications. Typically called by the Task Service or through RabbitMQ messaging.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "task_id",
                  "old_status",
                  "new_status",
                  "changed_by_id"
                ],
                "properties": {
                  "task_id": {
                    "type": "integer",
                    "example": 123
                  },
                  "old_status": {
                    "type": "string",
                    "enum": [
                      "Unassigned",
                      "Ongoing",
                      "Under Review",
                      "Completed"
                    ],
                    "example": "Ongoing"
                  },
                  "new_status": {
                    "type": "string",
                    "enum": [
                      "Unassigned",
                      "Ongoing",
                      "Under Review",
                      "Completed"
                    ],
                    "example": "Completed"
                  },
                  "changed_by_id": {
                    "type": "integer",
                    "example": 5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status update notifications sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Status update notifications sent successfully"
                    },
                    "recipients_notified": {
                      "type": "integer",
                      "example": 3
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Task not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reminders/task/{task_id}": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Get deadline reminders for a task",
        "description": "Retrieve all deadline reminders sent for a specific task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "description": "The unique identifier of the task",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task reminders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task_id": {
                      "type": "integer",
                      "example": 123
                    },
                    "reminders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DeadlineReminder"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No reminders found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/scheduler/trigger": {
      "post": {
        "tags": [
          "Notification"
        ],
        "summary": "Manually trigger deadline reminder check",
        "description": "Manually trigger the deadline reminder scheduler to check for upcoming deadlines and send reminders. Useful for testing.",
        "responses": {
          "200": {
            "description": "Scheduler triggered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Deadline reminder check completed"
                    },
                    "reminders_sent": {
                      "type": "integer",
                      "example": 5
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-10-13T14:30:00+08:00"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "username": {
            "type": "string",
            "example": "johndoe"
          },
          "name": {
            "type": "string",
            "example": "john"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "role": {
            "type": "string",
            "example": "staff"
          }
        }
      },
      "Task": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 101
          },
          "title": {
            "type": "string",
            "example": "Finish project report"
          },
          "description": {
            "type": "string",
            "example": "Complete and submit the project report by deadline"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "example": "2025-09-30T23:59:59Z"
          },
          "status": {
            "type": "string",
            "example": "Unassigned"
          },
          "owner_id": {
            "type": "integer",
            "example": 1
          },
          "subtasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subtask"
            }
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        }
      },
      "Subtask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 201
          },
          "title": {
            "type": "string",
            "example": "Draft introduction section"
          },
          "status": {
            "type": "string",
            "example": "In Progress"
          },
          "task_id": {
            "type": "integer",
            "example": 101
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 301
          },
          "body": {
            "type": "string",
            "example": "Please review the draft by tomorrow"
          },
          "author_id": {
            "type": "integer",
            "example": 1
          },
          "task_id": {
            "type": "integer",
            "example": 101
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 401
          },
          "filename": {
            "type": "string",
            "example": "report_draft.pdf"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/files/report_draft.pdf"
          },
          "task_id": {
            "type": "integer",
            "example": 101
          }
        }
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Website Redesign Project"
          },
          "description": {
            "type": "string",
            "example": "Complete redesign of the company website with modern UI/UX"
          },
          "deadline": {
            "type": "string",
            "format": "date-time",
            "example": "2025-12-31T23:59:59"
          },
          "owner_id": {
            "type": "integer",
            "example": 1,
            "description": "The user ID of the project owner"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-01T10:30:45.123456"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Error message describing the issue."
          }
        }
      },
      "DeadlineReminder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "task_id": {
            "type": "integer",
            "example": 123
          },
          "days_before": {
            "type": "integer",
            "enum": [
              1,
              3,
              7
            ],
            "example": 7,
            "description": "Days before deadline when reminder was sent"
          },
          "sent_at": {
            "type": "string",
            "format": "date-time",
            "example": "2025-10-06T09:00:00+08:00"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter the JWT token with the 'Bearer ' prefix (e.g., 'Bearer eyJhbGci...')."
      }
    }
  }
}
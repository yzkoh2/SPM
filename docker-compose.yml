networks:
  spm-net:
    driver: bridge
    name: spm-net

volumes:
  pgadmin_data:
  rabbitmq_data:
  notification_db_data: 

services:
  # Kong
  kong:
    image: kong:latest
    container_name: spm-kong-gateway
    restart: always
    networks:
      - spm-net
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    volumes:
      - ./kong.yml:/etc/kong/kong.yml
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"

  # PGAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: my-pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5434:80"
    depends_on:
      - user_db
    networks:
      - spm-net

  # Frontend
  frontend:
    build: ./frontend
    image: spm/frontend:1.0
    container_name: spm-frontend
    restart: always
    ports:
      - "5173:5173"
    env_file:
      - .env
    networks:
      - spm-net

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: spm-rabbitmq
    restart: always
    networks:
      - spm-net
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Backend Services
  user_service:
    build: ./backend/user_service
    image: spm/user_service:1.0
    container_name: spm_user_service
    restart: always
    networks:
      - spm-net
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - user_db

  task_service:
    build: ./backend/task_service
    image: spm/task_service:1.0
    container_name: spm_task_service
    restart: always
    networks:
      - spm-net
    env_file:
      - .env
    environment:
      DATABASE_URL: ${TASK_DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_REGION: ${S3_REGION}
    # volumes:
    #   - ./backend/task_service/uploads:/app/uploads
    depends_on:
      task_db:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  project_service:
    build: ./backend/project_service
    image: spm/project_service:1.0
    container_name: spm_project_service
    restart: always
    networks:
      - spm-net
    environment:
      PROJECT_DATABASE_URL: ${PROJECT_DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      - project_db
  
  # Notification Service
  notification_service:
    build: ./backend/notification_service
    image: spm/notification_service:1.0
    container_name: spm_notification_service
    restart: always
    networks:
      - spm-net
    ports:
      - "6003:6003"
    env_file:
      - .env
    environment:
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL}
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672/
      TASK_SERVICE_URL: http://spm_task_service:6001
      USER_SERVICE_URL: http://spm_user_service:6000
      NOTIFICATION_DATABASE_URL: postgresql://user:user@notification_db:5432/notification_db
    depends_on:
      notification_db:
        condition: service_healthy  
      rabbitmq:
        condition: service_healthy
      task_service:
        condition: service_started
      user_service:
        condition: service_started
        
  # Databases
  user_db:
    image: postgres:15
    container_name: user_db
    restart: always
    networks:
      - spm-net
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_DB: user_db
    ports:
      - "5433:5432"
    volumes:
      - ./backend/user_service/db:/docker-entrypoint-initdb.d

  task_db:
    image: postgres:15
    container_name: task_db
    restart: always
    networks:
      - spm-net
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_DB: task_db
    ports:
      - "5435:5432"
    volumes:
      - ./backend/task_service/db:/docker-entrypoint-initdb.d

  project_db:
    image: postgres:15
    container_name: project_db
    restart: always
    networks:
      - spm-net
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_DB: project_db
    ports:
      - "5436:5432"
    volumes:
      - ./backend/project_service/db:/docker-entrypoint-initdb.d

  notification_db:
    image: postgres:15
    container_name: notification_db
    restart: always
    networks:
      - spm-net
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_DB: notification_db
    ports:
      - "5437:5432"
    volumes:
      - ./backend/notification_service/db:/docker-entrypoint-initdb.d
      - notification_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d notification_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s